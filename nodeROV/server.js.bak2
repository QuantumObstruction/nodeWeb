var path = require('path');
var Repeat = require('repeat');
var express = require('express');
var exphbs = require('express-handlebars');
var bodyParser = require('body-parser');
var peopleData = require('./peopleData');
var app = express();
var port = process.env.PORT || 3000;
var i2c = require('i2c-bus');
var gpio = require('linux-gpio');
var TALK = 0;
var WAIT = 1;
app.engine('handlebars', exphbs({
    defaultLayout: 'main'
}));
app.set('view engine', 'handlebars');

app.use(bodyParser.json());

////////////////////////////////////////////GPIO????????????
pinNum = 57;
pinVal = false;


//Comment: 
//When server is in GPIO output "gpio.DIR_OUT"(sets direction) && state is 0, the Arduino
//Master/slave is supposed to be BLOCKED from taking on the bus.  //ARDUINO IS ON STANDBY
// Then we set to input. (Look before we walk)

//When server is in GPIO input: "gpio.DIR_IN"(sets direction) && state is 1, the Arduino
//Master/Slave is supposed to be able to TALK on the bus. 
// In order to know when the Server can take control of the bus when the state changes to 1 ('HIGH') (Look before we walk)

/// then we set the direction to output. 










/*
       ---------------------I2C MultiMaster Arbitration with Nodejs and Arduino---------------------
	When server is in GPIO input: "gpio.DIR_IN"(sets direction) && state is 1, the 
line is avalible for the taking. Upon taking the line we set the direction to output:"gpio.DIR_OUT" && set state to '0'
we can start to transmit communication over out i2c bus.  {TALK === 0}

	Upon completion of transmission over the i2c bus we change direction to input:"gpio.DIR_IN" 
(Which should set the state to '1')  {WAIT === 1}



psuedo

// this is mostly from the npm linux-gpio 


bool getState() {
Here we set up the gpio to read. I've found when just retriving the 
state without changing direction is very benifical.

gpio.export(pinNum, { }, function(err, pin) {
        if (err) console.log("Export error: ", err);
    
pin.value(function(err, state) {
        if (err) console.log("Read error: ", err);
        console.log("Pin %d state:", pin.pin, state);
	return state;
   });
   });
}
*/




function finishTransmission () {
console.log("< releasing bus ");
setState(WAIT);
console.log("< bus released >");
}


function startTransmission() {
var time =0;
var timeOut = 3000;
var deltaT = 100;

while( getState() === 0 ) {

if(timeOut <= time) {
console.log("< timeout > : seconds -> ", time/1000);
return false;
 }
	
console.log("startTransmission()::Line is busy ... waiting");

time += deltaT;
}

setState(TALK);
console.log("startTransmission()::<bus acquired, ready/ABLE to transmit >");
return true;
} 

function setState(oneOrzero) {
gpio.export(pinNum, {}, function(err, pin) {
if(TALK){
pin.direction(gpio.DIR_OUT, function(err) {
console.log("setState()::Pin %d configured as output", pin.pin);
 });
} else {
pin.direction(gpio.DIR_IN, function(err) {
console.log("setState()::Pin %d configured as output", pin.pin);
 });
}
});
}


Repeat( function () { 

getState();
}).every(1000, 'ms').start.now();








/*
if(startTransmission()) {
setTimeout( function () {
console.log("<Writing on i2c for 1 sec >");
}, 1000);
setTimeout( function () {
console.log("< Finished writing to i2c, 1 sec delay >");
finishTransmission();
}, 1000);
} else {
console.log("< your transmission was blocked >");
}
setTimeout( function () {
console.log(" < end of loop >");
console.log(" <  >");
}, 1000);
*/


//START TO READ read pin state on a loop
function getState() {
gpio.export(pinNum,{}, function(err, pin) {
	pin.value( function(err, state) { 	
		if (err) console.log("Read error: " ,err);
console.log("getState(): ", state); 			
	return state;
	});

	});
}


function printState() {
gpio.export(pinNum,{}, function(err, pin) {
	pin.direction(function(err, dir) {
    		console.log("Pin %d configured as %s", pin.pin, dir);
	});

	pin.value( function(err, state) { 	
		if (err) console.log("Read error: " ,err); 
			console.log("Pin %d state:", pin.pin, state);
	return state;
	});

	});
}


//gpio.close();
/*
var arduinoThruster_ADDR = 0x08,
    arduinoThruster_REG = 0x00,
    arduinoThruster_DATA_LENGTH = 0x05;
const buf0 = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var arduinoServo_ADDR = 0x09,
    arduinoServo_REG = 0x00,
    arduinoServo_DATA_LENGTH = 0x05;
const buf1 = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);

var arduinoSensor_ADDR = 0x07,
    arduinoSensor_REG = 0x02,
    arduinoSensor_DATA_LENGTH = 0x05;
const buf2 = new Buffer([0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);


i2c2 = i2c.openSync(1);

i2c2.i2cWrite(arduinoSensor_ADDR, arduinoSensor_DATA_LENGTH, buf2, function(err) {

    Repeat(function() {
        if (err) {
            console.log("SENSORS DOWN on i2cWrite");
        }


        i2c2.i2cRead(arduinoSensor_ADDR, arduinoSensor_DATA_LENGTH, buf2, function(err) {
            if (err) {
                console.log("SENSORS DOWN on i2cRead");
            }
            console.log("arduinoSensor_ADDR==== ", arduinoSensor_ADDR);
            console.log("arduinoSensor_DATA_LENGTH====", arduinoSensor_DATA_LENGTH);
            console.log("Distance: ", buf2[0], "cm");

            if (buf2[1] === 0) {
                console.log("Moisture Condition Dry");
            } else {
                console.log("DANGER Moisture Condition WET");
            }
        });
    }).every(200, 'ms').start.now();
});


i2c0 = i2c.openSync(1);

i2c0.i2cWrite(arduinoThruster_ADDR, arduinoThruster_DATA_LENGTH, buf0, function(err) {

    if (err) {
        console.log("THRUSTERS DOWN on i2cWrite");
    }

    i2c0.i2cRead(arduinoThruster_ADDR, arduinoThruster_DATA_LENGTH, buf0, function(err) {
        if (err) {
            console.log("THRUSTERS DOWN on i2cRead");
        }
        console.log(buf0);
        console.log("arduinoThruster_ADDR==== ", arduinoThruster_ADDR);
        console.log("arduinoThruster_DATA_LENGTH====", arduinoThruster_DATA_LENGTH);
        console.log(buf0.toString());
    });
});


i2c1 = i2c.openSync(1);

i2c1.i2cWrite(arduinoServo_ADDR, arduinoServo_DATA_LENGTH, buf1, function(err) {

    if (err) {
        console.log("SERVOS DOWN on i2cWrite");
    }

    i2c1.i2cRead(arduinoServo_ADDR, arduinoServo_DATA_LENGTH, buf1, function(err) {
        if (err) {
            console.log("SERVOS DOWN on i2cRead");
        }
        console.log("arduinoServo_ADDR==== ", arduinoServo_ADDR);
        console.log("arduinoServo_DATA_LENGTH====", arduinoServo_DATA_LENGTH);
        console.log(buf1.toString());
    });

});

*/
app.get('/', function(req, res) {
    res.status(200).render('homePage');
});

app.get('/people', function(req, res) {
    res.status(200).render('peoplePage', {
        people: peopleData
    });
});

app.get('/people/:personId', function(req, res, next) {
    var personId = req.params.personId;
    if (peopleData[personId]) {
        var person = peopleData[personId];
        res.status(200).render('personPage', person);
    } else {
        next();
    }
});

app.use(express.static('public'));

app.get('*', function(req, res) {
    res.status(404).render('404');
});

app.post('/people/:personId/addPhoto', function(req, res, next) {
    var personId = req.params.personId;
    if (peopleData[personId]) {
        console.log("== request body:", req.body);
        peopleData[personId].photos.push({
            photoURL: req.body.photoURL,
            caption: req.body.caption
        });
        console.log("== new person data:", peopleData[personId]);
        res.status(200).send("Success");
    } else {
        next();
    }
});

app.post('*', function(req, res) {
    res.status(404).send("POST not allowed");
});

app.listen(port, function() {
    console.log("== Server listening on port:", port);
});
